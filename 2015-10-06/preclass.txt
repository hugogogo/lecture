0.  How much time did you spend on this pre-class exercise, and when?

1.  What are one or two points that you found least clear in the
    10/06 slide decks (including the narration)?

2.  In the upcoming lecture (10/8), we will discuss how to model
    latency and bandwidth of MPI sends and receives using the
    ping-pong benchmark briefly described in the current demo.
    We would like to understand the difference between different
    MPI implementations (and make sure we know how to run MPI codes).

    a) Make sure the cs5220 module is loaded and type "which mpicc";
       if everything is correct, you should see the Intel MPI version
       (under /usr/local/intel).  Using this version of MPI and the
       default PBS files, run the pingpong examples (demo/pingpong).
	
	A:
		/usr/local/intel/impi/5.0.3.048/intel64/bin/mpicc
		1 3.0066e-07
		1001 4.0969e-07
		2001 4.8275e-07
		3001 5.58e-07
		4001 6.23809e-07
		5001 7.18155e-07
		6001 8.08165e-07
		7001 9.10349e-07
		8001 1.00109e-06
		9001 1.09863e-06
		10001 1.21917e-06
		11001 1.32832e-06
		12001 1.41132e-06
		13001 1.51908e-06
		14001 1.64238e-06
		15001 1.74554e-06
		16001 1.85948e-06


    b) Now do "module load openmpi/1.10.0-icc-15.0.3" after loading
       the CS 5220 module.  Check by typing "which mpicc" that you
       are now using a different version of mpicc.  Compile with
       OpenMPI, and re-run the on-node tests using OpenMPI (note:
       you will have to add a module load to the start of the PBS
       scripts).  How do the timings differ from the Intel MPI timings?

	A:
		/share/apps/openmpi-1.10.0-icc-15.0.3/bin/mpicc
		1 2.3788e-07
		1001 5.64024e-07
		2001 8.48445e-07
		3001 1.09259e-06
		4001 1.30383e-06
		5001 1.80721e-06
		6001 2.00448e-06
		7001 2.09701e-06
		8001 2.23648e-06
		9001 2.35166e-06
		10001 2.4871e-06
		11001 2.6213e-06
		12001 2.73742e-06
		13001 2.8099e-06
		14001 2.96836e-06
		15001 3.10019e-06
		16001 3.206e-06
		--------------------------------------------------------------------------
		mpirun noticed that process rank 1 with PID 4886 on node en-cs-totient-02 exited on signal 11 (Segmentation fault).
		--------------------------------------------------------------------------
	

    c) When running at the peak rate (e.g. 16 double precision
       flops/cycle), how many (double precision) floating point ops
       could two totient cores do in the minimal time required for one
       MPI message exchange?

	A:	Peak flop rate = 16 flops/cycle * 2 cores * 2.4 G cycles/s = 76.8 Gflops/s
		minimal time   = 2.3788 * 10^(-7) s
		Total Flop 	   = 76.8 Gflops * 2.3788 * 10^(-7) = 1.827 * 10^4 Flops
